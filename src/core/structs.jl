#----- TODO: struct

struct NRPhaseRetrievalData
    n_bus::Union{Integer,Real}
    Y::AbstractMatrix #Admittance
    J::AbstractMatrix #Jacobian Matrix
    Δp::AbstractArray #Real power perturbations
    Δq::AbstractArray #Reactive power perturbations
    Δv::AbstractArray #Voltage magnitude perturbations 
    sigma_noise::Union{Real,Float64}
    sel_bus_types::Union{AbstractArray{Integer},Integer}
end


"""
Given a network and bus types, create the NR phase retrieval model data
"""
function NRPhaseRetrievalData(network::Dict;sel_bus_types=[1])
    
end


"""
Given a basic network dict and a sigma_noise for the random perturbation, create phase retrieval model
"""
function NRPhaseRetrievalData(network::Dict,sigma_noise=0.0001;sel_bus_types=[1])
    compute_ac_pf!(network)

    #----- Get relevant PQ bus indeces
    sel_bus_idx = calc_bus_idx_of_type(network,sel_bus_types)
    #Get num_bus
    n_bus = length(sel_bus_idx)
    
    #----- Compute important ground truth values/params
    #Compute the ground truth Jacobians and Ybus
    J = calc_jacobian_matrix(network,sel_bus_types) #PQ buses only
    J_nom = J.matrix
    ∂pθ_true,∂qθ_true,∂pv,∂qv = J.pth,J.qth,J.pv,J.qv
    Y = calc_basic_admittance_matrix(network)[sel_bus_idx,sel_bus_idx]

    #Compute ground truth voltages
    v_rect_0 = calc_basic_bus_voltage(network)[sel_bus_idx]
    vm_nom,va_nom = abs.(v_rect_0),angle.(v_rect_0)
    

    #----- Compute a random perturbation around the operating point.
    d = Normal(0,sigma_noise)
    Δv,Δθ_true = rand(d,n_bus),rand(d,n_bus) 
    vm_obs,θ_true = vm_nom + Δv,va_nom + Δθ_true
    vph_obs = [vm_obs;θ_true]

    #--- Compute ground truth complex power injections
    rect_s_0 = calc_basic_bus_injection(network)[sel_bus_idx]
    p_0,q_0 = real.(rect_s_0),imag.(rect_s_0)
    s_0 = [p_0;q_0]

    #--- Compute the power mismatches generated by the perturbation around the operating point.
    Δs = calc_mismatch(vph_obs,rect_s_0,Y)
    Δp,Δq = Δs[1:n_bus],Δs[n_bus+1:end]

    #----- Check the reasonableness of this linearization
    @assert norm(Δs - J_nom*[Δv;Δθ_true]) <= 15 "Failure to linearize! Value: "*string(norm(Δs - J_nom*[Δv;Δθ_true]))
    #@assert norm([Δp;Δq] - J_nom*vph_obs) <= 1e-3 "Failure to linearize! Value: "*string(norm([Δp;Δq]  - J_nom*vph_obs))

    return NRPhaseRetrieval(n_bus,Y,J,Δp,Δq,Δv,sigma_noise,sel_bus_types)
end

